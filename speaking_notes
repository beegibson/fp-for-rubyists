# bio
ruby dev at REA
been in a variety of teams there, including doing ruby and functional in scala

immutability story
- Adding some contract tests to old java project
- it used gradle, so the build files were in groovy
- it was a scheduled task to move some data around
- we filtered a list of build dependencies to extract the stuff we wanted and do stuff
- the code path we needed worked
- things broke all over the place, because filter mutated the list, and we'd removed all other dependencies from the list.
- so nothing that ran after our code worked.

You can use implicit recursion like map, collect, filter, flatMap list comprehensions, instead of explicit

# teaching stories
- If your explaining monad's, explain a monad, relate it to one they already use, get them to see the pattern, then tell them the name. I've used that on people that thought monads were confusing, and they got it really quickly.

# learning more
- some of the resources are an example of just how bad it is humanly possible to explain things
- even when you understand the topic they can be super confusing
- you aren't stupid, the explanation is terrible
